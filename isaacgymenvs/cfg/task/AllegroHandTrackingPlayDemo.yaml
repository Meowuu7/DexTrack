# graphics_device_id: 0
name: AllegroHandTrackingPlayDemo

physics_engine: ${..physics_engine}


env:
  
  env_name: "AllegroHandTrackingPlayDemo"

  # /cephfs/xueyi/uni_manip/isaacgym_rl_exp_taco_grab_interpseq_eval_v2/statistics/data_inst_tag_to_optimized_res.npy
  ### grab inst tag to opt stat fn ###
  # directly help us with some problems --- the policy #
  grab_inst_tag_to_opt_stat_fn: '/cephfs/xueyi/uni_manip/isaacgym_rl_exp_grab/statistics/obj_type_to_optimized_res.npy'
  # set grab_inst_tag_to_optimized_res 
  # set taco and the grab inst tag to the optimized res fn #
  grab_inst_tag_to_optimized_res_fn: '/root/diffsim/softzoo/softzoo/diffusion/assets/data_inst_tag_to_optimized_res.npy'
  # taco_inst_tag_to_optimized_res_fn: "/cephfs/xueyi/uni_manip/isaacgym_rl_exp_taco_grab_interpseq_eval_v2/statistics/data_inst_tag_to_optimized_res.npy"
  taco_inst_tag_to_optimized_res_fn: ""
  object_type_to_latent_feature_fn: "/cephfs/xueyi/uni_manip/tds_diffusion_exp/allegro_tracking_kine_diff_AE_Diff_trainAE_vnew_/obj_type_to_obj_feat.npy"
  # /cephfs/xueyi/uni_manip/tds_diffusion_exp/allegro_tracking_kine_diff_AE_Diff_trainAE_vnewv2_v3data_sample_/inst_tag_to_obj_feat.npy
  inst_tag_to_latent_feature_fn: ''
  # export inst_tag_to_latent_feature_fn='/cephfs/xueyi/uni_manip/tds_diffusion_exp/allegro_tracking_kine_diff_AE_Diff_trainAE_vnewv2_v3data_sample_/inst_tag_to_obj_feat.npy'

  datanm_to_replay_fn_dict_fn: '/root/diffsim/IsaacGymEnvs2/assets/optimized_res_grab_300_demo/statistics/data_inst_tag_to_optimized_res_top50.npy'

  base_traj: ''
  
  obj_type_to_base_traj_fn: ''

  use_base_traj: False
  use_strict_maxx_nn_ts: False
  strict_maxx_nn_ts: 150
  taco_interped_data_sv_additional_tag: ''

  grab_obj_type_to_opt_res_fn: ''
  taco_obj_type_to_opt_res_fn: ''

  only_training_on_succ_samples: False

  rew_smoothness_coef: 0.0

  rew_grab_thres: 50.0
  rew_taco_thres: 200.0

  grab_train_test_setting: False
  
  maxx_inst_nn: 10000

  use_local_canonical_state: False
  
  replay_fn: ''


  object_feat_dim: 256
  tracking_save_info_fn: "/cephfs/xueyi/data/GRAB_Tracking_PK_reduced/data"
  # export tracking_info_st_tag='passive_active_info_'
  tracking_info_st_tag: 'passive_active_info_'
  use_hand_actions_rew: True
  supervised_training: False
  test_subj_nm: ''

  ### test instance tag ###
  test_inst_tag: ''
  test_optimized_res: ''
  single_instance_state_based_test: False
  sampleds_with_object_code_fn: ''

  numEnvs: 1024 #  1000
  envSpacing: 1.5
  episodeLength: 1000 # 150 # 250
  enableDebugVis: False
  aggregateMode: 1

  hand_type: 'allegro'

  test: False

  start_frame: 0

  separate_stages: False
  
  use_fingertips: False

  ground_distance: 0.0

  disable_obj_gravity: False

  right_hand_dist_thres: 0.12

  add_table: False
  table_z_dim: 0.5

  glb_trans_vel_scale: 1.0
  glb_rot_vel_scale: 1.0

  pre_optimized_traj: ''
  use_twostage_rew: False
  use_real_twostage_rew: False
  start_grasping_fr: False 

  lifting_separate_stages: False
  strict_lifting_separate_stages: False

  hand_pose_guidance_glb_trans_coef: 0.6
  hand_pose_guidance_glb_rot_coef: 0.1
  hand_pose_guidance_fingerpose_coef: 0.1

  use_kinematics_bias: False
  use_kinematics_bias_wdelta: False

  goal_dist_thres: 0.0

  use_taco_obj_traj: False

  #### reward ceofs ####
  rew_finger_obj_dist_coef: 0.5
  rew_delta_hand_pose_coef: 0.5
  rew_obj_pose_coef: 1.0
  #### reward ceofs ####
        
  tight_obs: False

  use_canonical_state: False
  use_unified_canonical_state: False

  rigid_obj_density: 500
  
  kinematics_only: False

  w_obj_ornt: False
  w_obj_vels: False

  mocap_sv_info_fn: ''
  object_name: ''

  exp_logging_dir: ''

  random_prior: True
  random_time: True
  repose_z: False #  True
  goal_cond: False

  object_code_dict: {
    'sem/Headphone':[1],
  }

  stiffnessScale: 1.0
  forceLimitScale: 1.0
  useRelativeControl: False
  dofSpeedScale: 20.0
  actionsMovingAverage: 1.0
  controlFrequencyInv: 1 # 60 Hz

  startPositionNoise: 0.0
  startRotationNoise: 0.0

  resetPositionNoise: 0.0
  resetRotationNoise: 0.0
  resetDofPosRandomInterval: 0.0
  resetDofVelRandomInterval: 0.0

  distRewardScale: 20
  transition_scale: 0.5
  orientation_scale: 0.1
  rotRewardScale: 1.0
  rotEps: 0.1
  actionPenaltyScale: -0.0002
  reachGoalBonus: 250
  fallDistance: 0.4
  fallPenalty: 0.0

  objectType: "pot" 
  observationType: "full_state_nforce" #  "full_state"
  
  handAgentIndex: "[[0, 1, 2, 3, 4, 5]]"
  asymmetric_observations: False
  successTolerance: 0.1
  printNumSuccesses: False
  maxConsecutiveSuccesses: 0

  asset:
    assetRoot: "../assets"
    assetFileName: "mjcf/open_ai_assets/hand/shadow_hand.xml"
    assetFileNameBlock: "urdf/objects/cube_multicolor.urdf"
    assetFileNameBall: "urdf/objects/ball.urdf"
    assetFileNameEgg: "mjcf/open_ai_assets/hand/egg.xml"
    assetFileNamePen: "mjcf/open_ai_assets/hand/pen.xml"

  vision:
    color:
      hand: [ 0.50, 0.50, 0.50 ] # gray
      # 0.6, 0.72, 0.98
      object: [ 1.00, 0.20, 0.20 ] # red
      goal: [ 0.50, 1.00, 0.35 ] # green
    pointclouds:
      numPresample: 65536
      numDownsample: 1024
      numEachPoint: 6
    camera:
      # relative to table center
      eye: [
        [ 0.0, 0.0, 0.55 ],
        [ 0.5, 0.0, 0.05 ],
        [ -0.5, 0.0, 0.05 ],
        [ 0.0, 0.5, 0.05 ],
        [ 0.0, -0.5, 0.05 ]
      ]
      lookat: [
        [ 0.01, 0.0, 0.05 ], # camera cannot look at accurate -z
        [ 0.0, 0.0, 0.05 ],
        [ 0.0, 0.0, 0.05 ],
        [ 0.0, 0.0, 0.05 ],
        [ 0.0, 0.0, 0.05 ],
      ]
    #      eye: [[0.2, -0.5, 0.4], [1.0, 0.2, 0.4], [0.2, 0.2, 0.8]]
    #      lookat: [[0.2, 3.5, 0.4], [-3.0, 0.2, 0.4], [0.2, 0.19, -1.2]]
    probe:
      num_probes: 0 # set this to 0
      width: 256
      height: 256
      eye: [
        [ 1.6, 0.0, 2.5 ],
      ]
      forward: [
        [ -0.8, 0.0, -2.0 ],
      ]
    bar:
      x_n: -1
      x_p: 1
      y_n: -1
      y_p: 1
      z_n: 0.61
      z_p: 1.3
      depth: 1.2

task:
  randomize: False
  randomization_params:
    frequency: 600   # Define how many simulation steps between generating new randomizations
    observations:
      range: [ 0, .002 ] # range for the white noise
      range_correlated: [ 0, .001 ] # range for correlated noise, refreshed with freq `frequency`
      operation: "additive"
      distribution: "gaussian"
      schedule: "linear"   # "constant" is to turn on noise after `schedule_steps` num steps
      schedule_steps: 40000
    actions:
      range: [ 0., .05 ]
      range_correlated: [ 0, .015 ] # range for correlated noise, refreshed with freq `frequency`
      operation: "additive"
      distribution: "gaussian"
      schedule: "linear"  # "linear" will linearly interpolate between no rand and max rand
      schedule_steps: 40000
    sim_params:
      gravity:
        range: [ 0, 0.4 ]
        operation: "additive"
        distribution: "gaussian"
        schedule: "linear"  # "linear" will linearly interpolate between no rand and max rand
        schedule_steps: 40000
    actor_params:
      hand:
        color: True
        tendon_properties:
          damping:
            range: [ 0.3, 3.0 ]
            operation: "scaling"
            distribution: "loguniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 30000
          stiffness:
            range: [ 0.75, 1.5 ]
            operation: "scaling"
            distribution: "loguniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 30000
        dof_properties:
          damping:
            range: [ 0.3, 3.0 ]
            operation: "scaling"
            distribution: "loguniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 30000
          stiffness:
            range: [ 0.75, 1.5 ]
            operation: "scaling"
            distribution: "loguniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 30000
          lower:
            range: [ 0, 0.01 ]
            operation: "additive"
            distribution: "gaussian"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 30000
          upper:
            range: [ 0, 0.01 ]
            operation: "additive"
            distribution: "gaussian"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 30000
        rigid_body_properties:
          mass:
            range: [ 0.5, 1.5 ]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 30000
        rigid_shape_properties:
          friction:
            num_buckets: 250
            range: [ 0.7, 1.3 ]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 30000
      object:
        scale:
          range: [ 0.95, 1.05 ]
          operation: "scaling"
          distribution: "uniform"
          schedule: "linear"  # "linear" will scale the current random sample by ``min(current num steps, schedule_steps) / schedule_steps`
          schedule_steps: 30000
        rigid_body_properties:
          mass:
            range: [ 0.5, 1.5 ]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by ``min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 30000
        rigid_shape_properties:
          friction:
            num_buckets: 250
            range: [ 0.7, 1.3 ]
            operation: "scaling"
            distribution: "uniform"
            schedule: "linear"  # "linear" will scale the current random sample by `min(current num steps, schedule_steps) / schedule_steps`
            schedule_steps: 30000

sim:
  dt: 0.0166 # 1/60 s # 
  substeps: 2
  use_gpu_pipeline: ${eq:${...pipeline},"gpu"}
  up_axis: "z"
  gravity: [0.0, 0.0, -9.81]
  physx:
    num_threads: 4
    solver_type: 1  # 0: pgs, 1: tgs
    num_position_iterations: 8 # 8 bottle
    num_velocity_iterations: 0
    contact_offset: 0.002
    rest_offset: 0.0
    bounce_threshold_velocity: 0.2
    max_depenetration_velocity: 1000.0
    default_buffer_size_multiplier: 5.0
  flex:
    num_outer_iterations: 5
    num_inner_iterations: 20
    warm_start: 0.8
    relaxation: 0.75